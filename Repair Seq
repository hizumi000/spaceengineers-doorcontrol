string positionset = "";                  // position if the arm
string dockingpositionset = "";     // position of the docking boom
string currentcommand = "";         // command line of currently executed sequence
int currentstep = 0;                       // step number of currently executed sequence
double lastTime = 0;                           // time since launch of program since timer activates this program.  Increments on each run, which is assumed to happen each sec.
double timeInProcess;                        // time runnning current process

string[,] sequence = new string[,] // Define sequence here
{
   {"30","a"},
   {"30","a1"},
   {"10","a1w"},
   {"30","a1"},
   {"30","a2"},
   {"10","a2w"},
   {"30","a2"},
   {"30","a3"},
   {"10","a3w"},
   {"30","a3"},
   {"30","a4"},
   {"10","a4w"},
   {"30","a4"},
   {"30","a5"},
   {"10","a5w"},
   {"30","a5"},
   {"30","a"},

   {"30","b"},
   {"30","b1"},
   {"10","b1w"},
   {"30","b1"},
   {"30","b2"},
   {"10","b2w"},
   {"30","b2"},
   {"30","b3"},
   {"10","b3w"},
   {"30","b3"},
   {"30","b4"},
   {"10","b4w"},
   {"30","b4"},
   {"30","b5"},
   {"10","b5w"},
   {"30","b5"},
   {"30","b"},      

   {"30","c"},
   {"30","c1"},
   {"10","c1w"},
   {"30","c1"},
   {"30","c2"},
   {"10","c2w"},
   {"30","c2"},
   {"30","c3"},
   {"10","c3w"},
   {"30","c3"},
   {"30","c4"},
   {"10","c4w"},
   {"30","c4"},
   {"30","c5"},
   {"10","c5w"},
   {"30","c5"},
   {"30","c"},

   {"30","d"},
   {"30","d1"},
   {"10","d1w"},
   {"30","d1"},
   {"30","d2"},
   {"10","d2w"},
   {"30","d2"},
   {"30","d3"},
   {"10","d3w"},
   {"30","d3"},
   {"30","d4"},
   {"10","d4w"},
   {"30","d4"},
   {"30","d5"},
   {"10","d5w"},
   {"30","d5"},
   {"30","d"},

   {"30","e"},
   {"30","e1"},
   {"10","e1w"},
   {"30","e1"},
   {"30","e2"},
   {"10","e2w"},
   {"30","e2"},
   {"30","e3"},
   {"10","e3w"},
   {"30","e3"},
   {"30","e4"},
   {"10","e4w"},
   {"30","e4"},
   {"30","e5"},
   {"10","e5w"},
   {"30","e5"},
   {"30","e"},

   {"0","end"}
};

public Program()
{
Runtime.UpdateFrequency = UpdateFrequency.Update1;
}

public void Main(string argument)

{


string Arm1Name = "Programmable block Arm1";
string Arm2Name = "Programmable block Arm2";
string Arm3Name = "Programmable block Arm3";
string Arm4Name = "Programmable block Arm4";
string Arm5Name = "Programmable block Arm5";
string Arm6Name = "Programmable block Arm6";
string DockName = "Programmable block Dock";
string WeldbedName = "Programmable block Welder OnOff";
string rdcName = "Programmable block RDC";
string Timer = "Timer Block Free";

Echo("Functional ");

// Override - Turn off main RDC

var PBMainrdc = GridTerminalSystem.GetBlockWithName(rdcName) as IMyProgrammableBlock;
PBMainrdc.ApplyAction("OnOff_Off");

currentcommand = RepairSequence(currentstep);  // call controller here.

if (currentcommand == "end") // terminate and restart RDC if command line is showing end
   {
   var timer = GridTerminalSystem.GetBlockWithName(Timer) as IMyTimerBlock;
   timer.StopCountdown();

   PBMainrdc.ApplyAction("OnOff_On");
   PBMainrdc.TryRun("");
   
   lastTime = 0;
   timeInProcess = 0; 
   currentstep = 0;

   Me.ApplyAction("OnOff_Off");

   return;
   }

ParsePosition(currentcommand); // extract information from command line

ArmControl(Arm1Name, positionset);
ArmControl(Arm2Name, positionset);
ArmControl(Arm3Name, positionset);
ArmControl(Arm4Name, positionset);
ArmControl(Arm5Name, positionset);
ArmControl(Arm6Name, positionset);
ArmControl(DockName, dockingpositionset.ToString());

if (positionset.Contains("w")) 
   {
   ArmControl(WeldbedName, "On");
   }
else
   {
   ArmControl(WeldbedName, "Off");
   }

Clock("");         // advance system clock and process clock
int benchTimeInProcess = Convert.ToInt32(sequence[currentstep, 0]);        

if (CheckInParam() || benchTimeInProcess < timeInProcess)     // If time has passed or 90% of parameters are met, increase step  
   {
       currentstep++; 
       timeInProcess = 0;
   } 

}


public void ParsePosition (string argument)   //  any numerical will be considered position code, with lower position taking priority.  Any w will be considered welding will be in progress.
{
Echo("Parsed Argument : " + argument);

if (argument.Contains("0")) 
   {
   positionset = "0";
   }
else if (argument.Contains("1"))
   {
   positionset = "1";
   }
else if (argument.Contains("2"))
   {
   positionset = "2";
   }
else if (argument.Contains("3"))
   {
   positionset = "3";
   }
else if (argument.Contains("4"))
   {
   positionset = "4";
   }
else if (argument.Contains("5"))
   {
   positionset = "5";
   }
else if (argument.Contains("6"))
   {
   positionset = "6";
   }
else if (argument.Contains("7"))
   {
   positionset = "7";
   }
else if (argument.Contains("8"))
   {
   positionset = "8";
   }
else if (argument.Contains("9"))
   {
   positionset = "9";
   }
else
   {
   positionset = "0";
   }

if (argument.ToLower().Contains("w")) 
   {
   positionset = positionset +"w";
   }


if (argument.ToLower().Contains("a")) 
   {
   dockingpositionset = "0";
   }
else if (argument.ToLower().Contains("b")) 
   {
   dockingpositionset = "1";
   }
else if  (argument.ToLower().Contains("c")) 
   {
   dockingpositionset = "2";
   }
else if  (argument.ToLower().Contains("d")) 
   {
   dockingpositionset = "3";
   }
else if  (argument.ToLower().Contains("e")) 
   {
   dockingpositionset = "4";
   }
else if  (argument.ToLower().Contains("f")) 
   {
   dockingpositionset = "5";
   }
else 
   {
   dockingpositionset = "0";
   }

}

public void ArmControl(string targetName, string argument)
{

   var target = GridTerminalSystem.GetBlockWithName(targetName) as IMyProgrammableBlock;
   target.TryRun(argument);
   Echo(targetName + " : " + argument);

}

public bool CheckInParam()
{

   int inparam = 0;

   string[] rotors = new string[] 
   {
   "Advanced Rotor 1-1",
   "Advanced Rotor 1-2",
   "Advanced Rotor 2-1",
   "Advanced Rotor 2-2",
   "Advanced Rotor 3-1",
   "Advanced Rotor 3-2",
   "Advanced Rotor 4-1",
   "Advanced Rotor 4-2",
   "Advanced Rotor 5-1",
   "Advanced Rotor 5-2",
   "Advanced Rotor 6-1",
   "Advanced Rotor 6-2"
   };

   string[] pistons = new string[] 
   {
   "Piston 1-1",
   "Piston 2-1",
   "Piston 3-1",
   "Piston 4-1",
   "Piston 5-1",
   "Piston 6-1",
   "Piston 1-2",
   "Piston 2-2",
   "Piston 3-2",
   "Piston 4-2",
   "Piston 5-2",
   "Piston 6-2",   
   "Piston Docking"
   };

   foreach (string thisrotor in rotors)
   {
       var rotorobj = GridTerminalSystem.GetBlockWithName(thisrotor) as IMyMotorStator;
       if (rotorobj.TargetVelocityRPM == 0f) 
       {
           inparam++;
       }
   }

   foreach (string thispiston in pistons)
   {
       var pistonobj = GridTerminalSystem.GetBlockWithName(thispiston) as IMyPistonBase;
       if (pistonobj.Velocity == 0f) 
       {
           inparam++;
       }
   }
   
   float inparampct = (float)inparam / ((float)rotors.Length + (float)pistons.Length) * 100;
   Echo("In parameter parts = " + inparam + " out of " + (rotors.Length + pistons.Length));
   Echo("In parameter % = " + inparampct + "%");
   
   if (inparampct > 90) 
       {
           return true;
       }
   else
       {
           return false;
       }

}
public void Clock(string argument)

{


lastTime = lastTime + Runtime.TimeSinceLastRun.TotalSeconds ;
timeInProcess = timeInProcess + Runtime.TimeSinceLastRun.TotalSeconds ;
Echo("Total Script Time: " + lastTime.ToString()); 
Echo("Current Step Time: " + timeInProcess.ToString()); 

}

 
public string RepairSequence(int currentstep)
{

// Loop and understand which step is executing, and get command line
// Timer is checked, and if the scheduled time is reached, next stage will be activated, IF 
// If the sequence is timed 30 seconds beyond schedule, sequence aborts and everythign resets to position 0
// When the sequence ends, program will activate main RDC.  Otherwise, RDC will be switched off by stopping the timer block.

   
   
// Define sequence

   string commandline = "";
   commandline = sequence[currentstep, 1];   
   return commandline;

}
